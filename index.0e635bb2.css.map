{"mappings":"4E,4H,iD,mB,6B,2B,oC,qC,gB,gD,gB,+B,qGCWA,sB,0BAAA,sB,0B,iE,gC,wD,6FA6BI,sB,6B,4D,mCAmBJ,sB,wB,2C,0G,4C,4F,+D,mM,2C,2D,0I,mF,8B,6B,4E,qE,+D,mC","sources":["index.0e635bb2.css","style.scss","../node_modules/.pnpm/minireset.css@0.0.7/node_modules/minireset.css/minireset.sass","../node_modules/.pnpm/include-media@2.0.0/node_modules/include-media/dist/_include-media.scss"],"sourcesContent":["/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */\nhtml, body, p, ol, ul, li, dl, dt, dd, blockquote, figure, fieldset, legend, textarea, pre, iframe, hr, h1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-size: 100%;\n  font-weight: normal;\n}\n\nul {\n  list-style: none;\n}\n\nbutton, input, select {\n  margin: 0;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, :before, :after {\n  box-sizing: inherit;\n}\n\nimg, video {\n  max-width: 100%;\n  height: auto;\n}\n\niframe {\n  border: 0;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd, th {\n  padding: 0;\n}\n\n::selection {\n  background: #f0a4a7;\n}\n\nhtml, body {\n  text-align: center;\n  background: #cfc4c3;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 16px;\n}\n\n@media (width <= 768px) {\n  html, body {\n    font-size: 14px;\n  }\n}\n\n@media (width <= 320px) {\n  html, body {\n    font-size: 12px;\n  }\n}\n\n.top {\n  background: #f9f8f2;\n  padding: 8vh 1.25em 3.75em;\n  font-size: 1rem;\n}\n\n.top__logo {\n  margin-bottom: 3.75em;\n}\n\n.top__github {\n  margin-bottom: 2.77778em;\n  font-size: 1.125rem;\n}\n\n.top__btns {\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 62.5em;\n  margin: 0 auto;\n  display: flex;\n}\n\n@media (width <= 768px) {\n  .top__btns {\n    flex-flow: column;\n  }\n}\n\n.top__btn {\n  cursor: pointer;\n  margin: .277778em;\n  font-size: 1.125em;\n}\n\n.logo {\n  color: #2d2f32;\n  font-size: 1rem;\n}\n\n@media (width <= 768px) {\n  .logo {\n    font-size: .85rem;\n  }\n}\n\n.logo__img {\n  width: 10em;\n  margin-bottom: .625em;\n}\n\n.logo__title {\n  justify-content: center;\n  margin-bottom: 1.25em;\n  font-family: Josefin Sans, sans-serif;\n  display: flex;\n}\n\n.logo__txt1 {\n  font-size: 4.5em;\n  font-weight: bold;\n}\n\n.logo__txt2 {\n  letter-spacing: .275em;\n  margin-top: 1.66667em;\n  margin-left: -1.45833em;\n  font-size: 3em;\n}\n\n.logo__desc {\n  color: #707271;\n  letter-spacing: .06em;\n  font-size: 1.5em;\n}\n\n.full-btn {\n  color: #aa999d;\n  background: #5a4545;\n  border-radius: 1.25em / 50%;\n  padding: .75em 1.75em;\n  text-decoration: none;\n  transition: background .2s;\n  display: inline-block;\n  box-shadow: 1px 1px 10px 1px #0000004d;\n}\n\n.full-btn__bold {\n  color: #fff;\n  font-weight: bold;\n}\n\n.full-btn:hover {\n  background: #433333;\n  transition-duration: .4s;\n}\n\n.gh-btn {\n  appearance: none;\n  color: #604b4c;\n  background: none;\n  border: 2px solid #574142;\n  outline: none;\n  padding: .875em .75em;\n  transition: background .2s;\n}\n\n.gh-btn:hover {\n  background: #e3d8b9;\n  text-decoration: underline;\n  transition-duration: .4s;\n}\n\n.gh-btn__bold {\n  font-weight: bold;\n}\n\n.gh-btn__param {\n  color: #0d9b8c;\n}\n\n.bottom {\n  text-align: center;\n  color: #7e696d;\n  padding: 2.5em 1.25em;\n  font-size: 1rem;\n}\n\n.bottom__txt {\n  margin: 0 auto 3.125em;\n  font-size: 1.125em;\n  line-height: 1.5;\n}\n\n.bottom__em {\n  background: #f4c6c5;\n  padding: 0 .25em;\n  font-weight: bold;\n}\n\n.bottom__license {\n  font-size: 1.125em;\n}\n\n.bottom__author {\n  color: #68565a;\n  font-family: Josefin Sans, sans-serif;\n  font-size: 1.125em;\n}\n\n/*# sourceMappingURL=index.0e635bb2.css.map */\n","@use 'minireset.css/minireset.sass';\n@use 'include-media/dist/include-media' as *;\n@use 'thejungle' as *;\n\n::-moz-selection {\n    background: #f0a4a7;\n}\n::selection {\n    background: #f0a4a7;\n}\n\nhtml,\nbody {\n    background: #cfc4c3;\n    text-align: center;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n\n    @include media('<=tablet') {\n        font-size: 14px;\n    }\n    @include media('<=phone') {\n        font-size: 12px;\n    }\n}\n\n.top {\n    font-size: 1rem;\n    padding: 8vh em(20px) em(60px);\n    background: #f9f8f2;\n\n    &__logo {\n        margin-bottom: em(60px);\n    }\n\n    &__github {\n        font-size: rem(18px);\n        margin-bottom: em(50px, 18px);\n    }\n\n    &__btns {\n        margin: 0 auto;\n        display: flex;\n        justify-content: center;\n        max-width: em(1000px);\n        flex-wrap: wrap;\n\n        @include media('<=tablet') {\n            flex-flow: column;\n        }\n    }\n\n    &__btn {\n        font-size: em(18px);\n        margin: em(5px, 18px);\n        cursor: pointer;\n    }\n}\n\n.logo {\n    color: #2d2f32;\n    font-size: 1rem;\n\n    @include media('<=tablet') {\n        font-size: 0.85rem;\n    }\n\n    &__img {\n        width: em(160px);\n        margin-bottom: em(10px);\n    }\n\n    &__title {\n        font-family: 'Josefin Sans', sans-serif;\n        display: flex;\n        justify-content: center;\n        margin-bottom: em(20px);\n    }\n\n    &__txt1 {\n        font-size: em(72px);\n        font-weight: bold;\n    }\n\n    &__txt2 {\n        font-size: em(48px);\n        letter-spacing: 0.275em;\n        margin-left: em(-70px, 48px);\n        margin-top: em(80px, 48px);\n    }\n\n    &__desc {\n        color: #707271;\n        font-size: em(24px);\n        letter-spacing: 0.06em;\n    }\n}\n\n.full-btn {\n    text-decoration: none;\n    color: #aa999d;\n    background: #5a4545;\n    padding: em(12px) em(28px);\n    border-radius: #{em(20px)} / 50%;\n    display: inline-block;\n    box-shadow: 1px 1px 10px 1px rgba(black, 0.3);\n    transition: background 0.2s;\n\n    &__bold {\n        font-weight: bold;\n        color: white;\n    }\n\n    &:hover {\n        background: darken(#5a4545, 8);\n        transition-duration: 0.4s;\n    }\n}\n\n.gh-btn {\n    -webkit-appearance: none;\n    appearance: none;\n    border: 2px solid #574142;\n    background: transparent;\n    color: #604b4c;\n    padding: em(14px) em(12px);\n    outline: none;\n    transition: background 0.2s;\n\n    &:hover {\n        background: #e3d8b9;\n        transition-duration: 0.4s;\n        text-decoration: underline;\n    }\n\n    &__bold {\n        font-weight: bold;\n    }\n    &__param {\n        color: #0d9b8c;\n    }\n}\n\n.bottom {\n    text-align: center;\n    color: #7e696d;\n    font-size: 1rem;\n    padding: em(40px) em(20px);\n\n    &__txt {\n        margin: 0 auto;\n        line-height: 1.5;\n        font-size: em(18px);\n        margin-bottom: em(50px);\n    }\n    &__em {\n        background: #f4c6c5;\n        padding: 0 em(4px);\n        font-weight: bold;\n    }\n    &__license {\n        font-size: em(18px);\n    }\n    &__author {\n        font-size: em(18px);\n        font-family: 'Josefin Sans', sans-serif;\n        color: darken(#7e696d, 8);\n    }\n}\n","/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */\n// Blocks\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  margin: 0\n  padding: 0\n\n// Headings\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  font-size: 100%\n  font-weight: normal\n\n// List\nul\n  list-style: none\n\n// Form\nbutton,\ninput,\nselect\n  margin: 0\n\n// Box sizing\nhtml\n  box-sizing: border-box\n\n*\n  &,\n  &::before,\n  &::after\n    box-sizing: inherit\n\n// Media\nimg,\nvideo\n  height: auto\n  max-width: 100%\n\n// Iframe\niframe\n  border: 0\n\n// Table\ntable\n  border-collapse: collapse\n  border-spacing: 0\n\ntd,\nth\n  padding: 0\n","//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v2.0.0\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n@charset \"UTF-8\";\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n@use 'sass:string';\n@use 'sass:meta';\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x':\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x':\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if meta.feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map.has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not list.index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if string.index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: string.index($expression, $operator);\n  $parsed-dimension: string.slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if string.length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(list.index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: string.index($expression, $operator);\n  $value: string.slice($expression, $operator-index + string.length($operator));\n\n  @if map.has-key($breakpoints, $value) {\n    $value: map.get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map.get($unit-intervals, math.unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{math.unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map.has-key($media-expressions, $expression) {\n    @return map.get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: list.length($list)) {\n  @if list.length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: list.append($result, list.nth($list, $i), comma);\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n\n@function to-number($value) {\n  @if meta.type-of($value) == 'number' {\n    @return $value;\n  } @else if meta.type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: string.slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: string.slice($value, 2);\n  }\n\n  @for $i from 1 through string.length($value) {\n    $character: string.slice($value, $i, $i);\n\n    @if not(list.index(map.keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), string.slice($value, $i));\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map.get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + math.div(map.get($numbers, $character), $digits);\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    'px': 1px,\n    'cm': 1cm,\n    'mm': 1mm,\n    '%': 1%,\n    'ch': 1ch,\n    'pc': 1pc,\n    'in': 1in,\n    'em': 1em,\n    'rem': 1rem,\n    'pt': 1pt,\n    'ex': 1ex,\n    'vw': 1vw,\n    'vh': 1vh,\n    'vmin': 1vmin,\n    'vmax': 1vmax,\n  );\n\n  @if not list.index(map.keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map.get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map.merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map.merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and list.length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and list.length($conditions) > 0) {\n    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.0e635bb2.css.map"}